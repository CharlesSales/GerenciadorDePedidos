import { supabase } from "../supabaseClient.js"
import jwt from 'jsonwebtoken'

// ‚úÖ OTIMIZA√á√ÉO: Cache simples em mem√≥ria
const cache = new Map();
const CACHE_TTL = 5 * 60 * 1000; // 5 minutos

// ‚úÖ LISTAR PRODUTOS (COM FILTRO POR RESTAURANTE SE AUTENTICADO)
export async function listarProdutos(req, res) {
  try {
    console.log('üì¶ Listando produtos...');

    const cacheKey = 'produtos_list';
    const cached = cache.get(cacheKey);

     // Verificar cache
    if (cached && (Date.now() - cached.timestamp < CACHE_TTL)) {
      console.log('üì¶ Produtos servidos do cache');
      return res.json(cached.data);
    }

    // ‚úÖ VERIFICAR SE TEM TOKEN
    const token = req.headers.authorization?.replace('Bearer ', '');
    let restauranteId = null;

    if (token) {
      try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        
        if (decoded.tipo === 'funcionario') {
          // ‚úÖ FUNCION√ÅRIO: BUSCAR RESTAURANTE
          const { data: funcionario } = await supabase
            .from('funcionario')
            .select('restaurante')
            .eq('id_funcionario', decoded.id)
            .single();
          
          restauranteId = funcionario?.restaurante;
        } else if (decoded.tipo === 'restaurante') {
          // ‚úÖ RESTAURANTE: USAR PR√ìPRIO ID
          restauranteId = decoded.id;
        }

        console.log('üè™ Filtrar produtos do restaurante:', restauranteId);
      } catch (tokenError) {
        console.log('‚ö†Ô∏è Token inv√°lido, listando todos os produtos');
      }
    } else {
      console.log('üì¶ Sem token, listando todos os produtos');
    }

    // ‚úÖ BUSCAR PRODUTOS
    let query = supabase
      .from('produtos')
      .select(`
        id_produto,
        nome,
        descricao,
        preco,
        imagem,
        cozinha,
        estoque,
        restaurante,
        categoria(categoria_nome)
      `)
      .order('id_produto', { ascending: true });

    // ‚úÖ FILTRAR POR RESTAURANTE SE IDENTIFICADO
    if (restauranteId) {
      query = query.eq('restaurante', restauranteId);
    }

    const { data: produtos, error } = await query;

    if (error) {
      console.error('‚ùå Erro ao buscar produtos:', error);
      return res.status(500).json({ error: error.message });
    }

    console.log(`‚úÖ ${produtos?.length || 0} produtos encontrados para restaurante ${restauranteId || 'todos'}`);

    const API_URL = process.env.NEXT_PUBLIC_API_URL || "https://gerenciadordepedidos.onrender.com";

    // ‚úÖ ADICIONAR URL DA IMAGEM SE NECESS√ÅRIO
    const produtosComImagem = produtos?.map(produto => ({
      ...produto,
      imagem_url: produto.imagem ? `${API_URL}/uploads/${produto.imagem}` : null
    })) || [];

    res.json(produtosComImagem);

  } catch (err) {
    console.error("‚ùå Erro:", err);
    res.status(500).json({ error: err.message });
  }
}

// ‚úÖ BUSCAR PRODUTO POR ID
export async function buscarProdutoPorId(req, res) {
  try {
    const { id } = req.params;
    console.log('üîç Buscando produto ID:', id);

    const { data: produto, error } = await supabase
      .from('produtos')
      .select(`
        id_produto,
        nome,
        descricao,
        preco,
        imagem,
        cozinha,
        estoque,
        restaurante,
        categoria(categoria_nome)
      `)
      .eq('id_produto', id)
      .single();

    if (error || !produto) {
      console.log('‚ùå Produto n√£o encontrado');
      return res.status(404).json({ error: 'Produto n√£o encontrado' });
    }

    console.log('‚úÖ Produto encontrado:', produto.nome);

    const API_URL = process.env.NEXT_PUBLIC_API_URL || "https://gerenciadordepedidos.onrender.com";

    // ‚úÖ ADICIONAR URL DA IMAGEM
    const produtoComImagem = {
      ...produto,
      imagem_url: produto.imagem ? `${API_URL}/uploads/${produto.imagem}` : null
    };

    res.json(produtoComImagem);

  } catch (err) {
    console.error("‚ùå Erro:", err);
    res.status(500).json({ error: err.message });
  }
}

// cadastrarProdutos
export async function cadastrarProdutos(req, res) {
  console.log("Arquivo recebido:", req.file);

  try {
    console.log("Arquivo recebido:", req.file);

    const { nome, descricao, preco, estoque, cozinha, categoria, restaurante } = req.body;
    const file = req.file; // imagem enviada pelo cliente
  
  if(!nome) {
        return res.status(422).json({ msg: 'O nome √© obrigatorio!'});
    }

    if(!descricao) {
        return res.status(422).json({ msg: 'O descricao √© obrigatorio!'});
    }

    if(!preco) {
        return res.status(422).json({ msg: 'O preco √© obrigatoria!'});
    }
    if(!estoque) {
        return res.status(422).json({ msg: 'O estoque √© obrigatoria!'});
    }
    if(!estoque) {
        return res.status(422).json({ msg: 'O cozinha √© obrigatoria!'});
    }
    if(!cozinha) {
        return res.status(422).json({ msg: 'O categoria √© obrigatoria!'});
    }
    if(!categoria) {
        return res.status(422).json({ msg: 'O categoria √© obrigatoria!'});
    }
    if(!restaurante) {
        return res.status(422).json({ msg: 'O restaurante √© obrigatoria!'});
    }

    // ‚úÖ VERIFICAR SE USU√ÅRIO J√Å EXISTE (SUPABASE CORRETO)
    const { data: exists, error: checkError } = await supabase
      .from('produtos') 
      .select('nome')
      .eq('nome', nome)
      .maybeSingle();

    if (checkError && checkError.code !== 'PGRST116') {
      // PGRST116 = "n√£o encontrado" √© OK, outros erros n√£o
      console.error('Erro ao verificar usu√°rio:', checkError);
      return res.status(500).json({ msg: 'Erro ao verificar usu√°rio existente' });
    }

    if (exists) {
        return res.status(422).json({ msg: 'J√° existe um usu√°rio com esse nome!' });
    }

    // Envia imagem para o Supabase Storage
    const fileName = `${Date.now()}-${file.originalname}`; 
    const { data: uploadData, error: uploadError } = await supabase.storage
      .from("imagens")
      .upload(fileName, file.buffer, { contentType: file.mimetype });
    // remover arquivo tempor√°rio depois
  



    if (uploadError) {
      console.error("Erro ao fazer upload da imagem:", uploadError);
      return res.status(500).json({ msg: "Erro ao fazer upload da imagem" });
    }

    // üîó Pega a URL p√∫blica
    const { data: publicUrlData } = supabase.storage
      .from("imagens")
      .getPublicUrl(fileName);

    const imageUrl = publicUrlData.publicUrl;


    const { data, error } = await supabase
    .from('produtos')
    .insert([
      { nome, descricao, preco, estoque, cozinha, categoria, restaurante, imagem: imageUrl } // sem id_produto
    ])
    .select(); // optional: retorna o registro inserido


    cache.delete('produtos_list');
    console.log('üóëÔ∏è Cache de produtos limpo');

  if (error) return res.status(500).json({ error: error.message});
  res.json({ message: 'Restaurante cadastrado com sucesso'})

}  catch (err) {
    console.error('Erro interno:', err);
    res.status(500).json({ msg: 'Erro interno do servidor' });
  }
}




// atualizarrodutos
export async function editarprodutos(req, res) {
  const { id } = req.params;
  const { campo, novoValor } = req.body;


  const colunasPermitidas = ['nome', 'descricao', 'preco', 'imagem', 'cozinha', 'estoque', 'restaurante', 'categoria'];

  if (!colunasPermitidas.includes(campo)) {
    return res.status(400).json({ error: "Campo inv√°lido para atualiza√ß√£o" });
  }

  console.log("üì© Dados recebidos no editarFuncionario:", req.params, req.body);

  try {
    const { data: produtoAtual, error: errorSelect } = await supabase
      .from("produtos")
      .select("id_produto")
      .eq("id_produto", id)
      .single();

    if (errorSelect || !produtoAtual) {
      return res.status(404).json({ error: "Produto n√£o encontrado" });
    }
produto
    const { data, error } = await supabase
      .from("produtos")
      .update({ [campo]: novoValor })
      .eq("id_produto", id)
      .select();

    if (error) {
      console.error(error);
      return res.status(500).json({ error: "Erro ao atualizar produtos" });
    }

   
    res.json({ message: "Funcion√°rio atualizado com sucesso!", produtos: data[0] });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "Erro inesperado ao atualizar funcion√°rio" });
  }
}